ConvBlock
합성곱(Convolution), 배치 정규화(Batch Normalization), SiLU 활성화 함수를 포함한 합성곱 블록을 정의합니다.

        class ConvBlock(nn.Module):
            def __init__(self, in_channels, out_channels, kernel_size, stride):
                super(ConvBlock, self).__init__()
                self.conv = nn.Conv2d(in_channels, out_channels, kernel_size, stride=stride, padding=kernel_size//2)
                self.bn = nn.BatchNorm2d(out_channels)
                self.silu = nn.SiLU()
        
            def forward(self, x):
                return self.silu(self.bn(self.conv(x)))

class SPPF(nn.Module):
    def __init__(self, in_channels):
        super(SPPF, self).__init__()
        self.maxpool_1 = nn.MaxPool2d(kernel_size=5, stride=1, padding=2)
        self.maxpool_2 = nn.MaxPool2d(kernel_size=9, stride=1, padding=4)
        self.maxpool_3 = nn.MaxPool2d(kernel_size=13, stride=1, padding=6)
        self.out_channels = in_channels * 4

    def forward(self, x):
        x1 = self.maxpool_1(x)
        x2 = self.maxpool_2(x)
        x3 = self.maxpool_3(x)
        return torch.cat([x, x1, x2, x3], 1)
class C2f(nn.Module):
    def __init__(self, channels):
        super(C2f, self).__init__()
        self.conv1 = ConvBlock(channels, channels // 2, 1, 1)
        self.conv2 = ConvBlock(channels // 2, channels, 3, 1)

    def forward(self, x):
        return self.conv2(self.conv1(x)) + x 

class PANFPN(nn.Module):
    def __init__(self, channels_list):
        super(PANFPN, self).__init__()
        self.c2fs = nn.ModuleList([C2f(ch) for ch in channels_list])

    def forward(self, features):
        for i, c2f in enumerate(self.c2fs):
            features[i] = c2f(features[i])
        # Implement the lateral connections and top-down pathway
        return features

class PredictionHead(nn.Module):
    def __init__(self, in_channels, num_classes):
        super(PredictionHead, self).__init__()
        self.conv = ConvBlock(in_channels, in_channels * 2, 3, 1)
        self.output_conv = nn.Conv2d(in_channels * 2, num_classes, 1, 1)

    def forward(self, x):
        return self.output_conv(self.conv(x))

class YOLOv8(nn.Module):
    def __init__(self, num_classes):
        super(YOLOv8, self).__init__()
        # Backbone을 정의합니다.
        self.backbone = nn.Sequential(
            ConvBlock(3, 32, 3, 1),        
            SPPF(32),                      
            ConvBlock(128, 64, 3, 2),      
            ConvBlock(64, 128, 3, 2)    
        )
        self.neck = PANFPN([128, 256, 512]) 
        self.heads = nn.ModuleList([
            PredictionHead(128, num_classes), 
            PredictionHead(256, num_classes),
            PredictionHead(512, num_classes)
        ])

    def forward(self, x):
        print(f"Input shape: {x.shape}")
        x = self.backbone(x)
        print(f"After backbone shape: {x.shape}")
        features = [x]
        features = self.neck(features)
        print(f"After neck shape: {[f.shape for f in features]}")
        outputs = [head(f) for f, head in zip(features, self.heads)]
        print(f"Final outputs shape: {[o.shape for o in outputs]}")
        return outputs


class SPDConv(nn.Module):
    """Space-to-depth convolution module for maintaining high-resolution features."""
    def __init__(self, in_channels, out_channels, reduction_ratio=2):
        super(SPDConv, self).__init__()
        self.in_channels = in_channels
        self.out_channels = out_channels
        self.reduction_ratio = reduction_ratio
        self.intermediate_channels = in_channels // reduction_ratio

        self.space_to_depth = nn.Unfold(kernel_size=reduction_ratio, stride=reduction_ratio)
        self.conv = nn.Conv2d(in_channels, self.intermediate_channels, kernel_size=1, stride=1)
        self.depth_to_space = nn.Fold(output_size=(in_channels, in_channels), kernel_size=reduction_ratio)

        self.processing = nn.Sequential(
            nn.Conv2d(self.intermediate_channels * reduction_ratio**2, self.intermediate_channels, 1),
            nn.BatchNorm2d(self.intermediate_channels),
            nn.ReLU(inplace=True),
            nn.Conv2d(self.intermediate_channels, out_channels, 1),
            nn.BatchNorm2d(out_channels),
            nn.ReLU(inplace=True)
        )

    def forward(self, x):
        # Convert space to depth
        batch_size, channels, height, width = x.size()
        x = self.space_to_depth(x).view(batch_size, self.intermediate_channels, -1, height // self.reduction_ratio, width // self.reduction_ratio)
        x = x.permute(0, 1, 3, 4, 2).contiguous().view(batch_size, -1, height // self.reduction_ratio, width // self.reduction_ratio)

        # Process features
        x = self.processing(x)

        # Convert depth back to space
        x = self.depth_to_space(x.view(batch_size, -1, height * width // (self.reduction_ratio ** 2)))
        x = x.view(batch_size, self.out_channels, height, width)

        return x


def soft_nms(boxes, sigma=0.5, Nt=0.3, threshold=0.001, method=0):
    N = boxes.size(0)
    indexes = torch.arange(0, N, dtype=torch.float).cuda()
    scores = boxes[:, 4].clone()

    # Iterate through all the boxes
    for i in range(N):
        # Get the box with the maximum score
        maxscore, maxpos = scores.max(0)
        maxpos = maxpos.item()

        # Add the box with the highest score to the position of i
        boxes[i], boxes[maxpos] = boxes[maxpos].clone(), boxes[i].clone()
        scores[i], scores[maxpos] = scores[maxpos].clone(), scores[i].clone()
        indexes[i], indexes[maxpos] = indexes[maxpos].clone(), indexes[i].clone()

        # Calculate the IoU (Intersection over Union)
        ious = iou(boxes[i], boxes[i+1:])

        # Soft-NMS formula: decay the scores
        if method == 0:  # Gaussian
            decay = torch.exp(-(ious ** 2) / sigma)
        else:  # Linear or Polynomial Decay
            decay = torch.ones_like(ious)
            decay[ious > Nt] = 1 - ious[ious > Nt]

        scores[i+1:] *= decay

    # Filter out the boxes with a score below the threshold
    keep = scores > threshold
    boxes = boxes[keep]
    scores = scores[keep]
    indexes = indexes[keep]

    return boxes, scores, indexes

def iou(box, boxes):
    """Calculate the Intersection over Union (IoU) between a box and a list of boxes."""
    x1, y1, x2, y2 = box[:4]
    xx1 = torch.maximum(x1, boxes[:, 0])
    yy1 = torch.maximum(y1, boxes[:, 1])
    xx2 = torch.minimum(x2, boxes[:, 2])
    yy2 = torch.minimum(y2, boxes[:, 3])

    w = torch.maximum(torch.tensor(0.0).cuda(), xx2 - xx1)
    h = torch.maximum(torch.tensor(0.0).cuda(), yy2 - yy1)

    inter = w * h
    area1 = (x2 - x1) * (y2 - y1)
    area2 = (boxes[:, 2] - boxes[:, 0]) * (boxes[:, 3] - boxes[:, 1])

    return inter / (area1 + area2 - inter)

class TinyPredictionHead(nn.Module):
    def __init__(self, in_channels, num_classes):
        super(TinyPredictionHead, self).__init__()
        self.conv = ConvBlock(in_channels, in_channels * 2, 3, 1)
        self.output_conv = nn.Conv2d(in_channels * 2, num_classes, 1, 1)

    def forward(self, x):
        return self.output_conv(self.conv(x))

# 기존 YOLOv8 클래스에 TinyPredictionHead 추가
class HSPYOLOv8 (nn.Module):
    def __init__(self, num_classes):
        super(HSPYOLOv8, self).__init__()
        # Backbone을 정의합니다.
        self.backbone = nn.Sequential(
            ConvBlock(3, 32, 3, 1),        
            SPPF(32),                       
            ConvBlock(128, 64, 3, 2),   
            ConvBlock(64, 128, 3, 2)     
        )
        self.extra_layer1 = ConvBlock(128, 256, 3, 2)
        self.extra_layer2 = ConvBlock(256, 512, 3, 2)

        self.neck = PANFPN([128, 256, 512])

        # Heads 정의
        self.heads = nn.ModuleList([
            PredictionHead(128, num_classes), 
            PredictionHead(256, num_classes),
            PredictionHead(512, num_classes)
        ])

    def forward(self, x):
        print(f"Input shape: {x.shape}")

        x = self.backbone(x)
        print(f"After backbone shape: {x.shape}")

        x1 = self.extra_layer1(x)
        print(f"Extra layer 1 shape: {x1.shape}")

        x2 = self.extra_layer2(x1)
        print(f"Extra layer 2 shape: {x2.shape}")

        features = [x, x1, x2]
        features = self.neck(features)

        print(f"After neck shape: {[f.shape for f in features]}")
        outputs = [head(f) for f, head in zip(features, self.heads)]

        print(f"Final outputs shape: {[o.shape for o in outputs]}")
        return outputs
